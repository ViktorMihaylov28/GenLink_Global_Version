// server.js
const express = require('express');
require('dotenv').config();
process.env.NODE_ENV = 'production';
const path = require('path');
const cookieParser = require('cookie-parser');
const mysql = require('mysql2');
const cors = require('cors');
const session = require('express-session');
const app = express();
const PORT = process.env.PORT || 3000;


app.use(cors({
  origin: ['http://localhost:3000', 'https://genlink-production.up.railway.app'],
  credentials: true
}));

app.use(express.json());               // –ü–∞—Ä—Å–≤–∞–Ω–µ –Ω–∞ JSON –∑–∞—è–≤–∫–∏
app.use(cookieParser());               // –ü–∞—Ä—Å–≤–∞–Ω–µ –Ω–∞ cookies –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
app.set('trust proxy', 1);             // –ó–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–æ –∑–∞ trust –ø—Ä–∏ proxy (Railway, HTTPS)
app.use((req, res, next) => {
  console.log('üîç Protocol:', req.protocol);
  console.log('üîç x-forwarded-proto:', req.headers['x-forwarded-proto']);
  next();
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ —Å–µ—Å–∏–∏ —Å express-session
app.use(session({
  name: 'sid',
  secret: 'yourSecretHere',     // —Å–ª–æ–∂–Ω–∞ –∏ —É–Ω–∏–∫–∞–ª–Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç –≤ —Ä–µ–∞–ª–µ–Ω –ø—Ä–æ–µ–∫—Ç
  resave: false,
  saveUninitialized: false,
  cookie: {
    httpOnly: true,             // ‚ùó –Ω–µ –¥–æ—Å—Ç—ä–ø–Ω–æ –æ—Ç JavaScript
    secure: true,               // ‚ùó –∏–∑–∏—Å–∫–≤–∞ HTTPS (–Ω–∞–ª–∏—á–Ω–æ –≤ Railway)
    sameSite: 'none',           // ‚ùó –Ω—É–∂–¥–∞—Ç–∞ –∑–∞ cross-origin
    maxAge: 1000 * 60 * 60 * 2, // ‚ùó 2 —á–∞—Å–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç
    path: "/"                   // ‚ùó –¥–æ—Å—Ç—ä–ø–Ω–æ –Ω–∞–≤—Å—è–∫—ä–¥–µ –≤ –¥–æ–º–µ–π–Ω–∞
  }
}));

// –°—Ç–∞—Ç–∏—á–Ω–æ –æ–±—Å–ª—É–∂–≤–∞–Ω–µ –Ω–∞ —Ñ–∞–π–ª–æ–≤–µ –æ—Ç —Ç–µ–∫—É—â–∞—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
app.use(express.static(path.join(__dirname)));

// –í—Ä—ä–∑–∫–∞ —Å MySQL –±–∞–∑–∞ –¥–∞–Ω–Ω–∏ —á—Ä–µ–∑ mysql2 (POOL)
const db = mysql.createPool({
  host: process.env.MYSQLHOST,
  user: process.env.MYSQLUSER,
  password: process.env.MYSQLPASSWORD,
  database: process.env.MYSQL_DATABASE,
  port: process.env.MYSQLPORT,
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0
});
console.log('MySQL –ø—É–ª –æ—Ç –≤—Ä—ä–∑–∫–∏ –µ —Å—ä–∑–¥–∞–¥–µ–Ω');
console.log("–ü—Ä–æ–º—è–Ω–∞ –∑–∞ —Ñ–æ—Ä—Å–∏—Ä–∞–Ω–µ –Ω–∞ –±–∏–ª–¥");


// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å–∏—è (–ª–æ–≥–Ω–∞—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª)
app.get('/api/check-session', (req, res) => {
  if (req.session.user) {
    res.json({ loggedIn: true, user: req.session.user });
  } else {
    res.json({ loggedIn: false });
  }
});

// –ò–∑—Ö–æ–¥ –æ—Ç –∞–∫–∞—É–Ω—Ç ‚Äì –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ —Å–µ—Å–∏—è –∏ cookie
app.post('/api/logout', (req, res) => {
  req.session.destroy(err => {
    if (err) {
      return res.status(500).json({ success: false, message: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ö–æ–¥' });
    }
    res.clearCookie('connect.sid'); // –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ cookie-—Ç–æ
    res.json({ success: true, message: '–ò–∑–ª—è–∑–æ—Ö—Ç–µ —É—Å–ø–µ—à–Ω–æ' });
  });
});

// –û–±—Å–ª—É–∂–≤–∞–Ω–µ –Ω–∞ admin.html –ø—Ä–∏ –∑–∞—è–≤–∫–∞ –∫—ä–º /admin
app.get('/admin', (req, res) => {
  res.sendFile(path.join(__dirname, 'admin.html'));
});

// –†—É—Ç –∑–∞ –æ–±—Å–ª—É–∂–≤–∞–Ω–µ –Ω–∞ index.html –ø—Ä–∏ –¥–∏—Ä–µ–∫—Ç–µ–Ω –¥–æ—Å—Ç—ä–ø —á—Ä–µ–∑ –ª–∏–Ω–∫–æ–≤–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä –æ—Ç –ª–æ–≥–æ—Ç–æ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏—è—Ç–∞)
app.get('/index.html', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});



// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –ø–æ username (–ø—Ä–µ–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
app.get('/api/check-username/:username', (req, res) => {
  const { username } = req.params;
  const query = 'SELECT * FROM users WHERE username = ?';

  db.query(query, [username], (err, results) => {
    if (err) {
      console.error("‚ùå –ì—Ä–µ—à–∫–∞ –≤ /check-username:", err);
      return res.status(500).json({ error: 'DB error' });
    }

    console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ username '${username}', —Ä–µ–∑—É–ª—Ç–∞—Ç–∏:`, results.length);
    res.json({ exists: results.length > 0 });
  });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –∏–º–µ–π–ª —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ (–ø—Ä–µ–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
app.get('/api/check-email/:email', (req, res) => {
  const { email } = req.params;
  const query = 'SELECT * FROM users WHERE email = ?';
  db.query(query, [email], (err, results) => {
    if (err) return res.status(500).json({ error: 'DB error' });
    res.json({ exists: results.length > 0 });
  });
});

// –í—Ö–æ–¥ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª ‚Äì –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ username, email –∏ –ø–∞—Ä–æ–ª–∞
app.post('/api/login', (req, res) => {
  const { username, email, password } = req.body;
  const query = 'SELECT * FROM users WHERE username = ? AND email = ? AND password = ?';
  db.query(query, [username, email, password], (err, results) => {
    if (err) return res.status(500).json({ error: 'DB error' });
    if (results.length === 0) {
      return res.status(401).json({ success: false, message: '–ù–µ–≤–∞–ª–∏–¥–Ω–∏ –¥–∞–Ω–Ω–∏' });
    }

    const user = results[0];

    // –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ –≤ —Å–µ—Å–∏—è
    req.session.user = {
      id: user.ID,
      username: user.Username,
      email: user.Email
    };

    res.json({
      success: true,
      user: req.session.user
    });
  });
});

// üü¢ –ù–æ–≤ –º–∞—Ä—à—Ä—É—Ç –∑–∞ –í–•–û–î –ù–ê –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†
app.post('/api/admin_login', (req, res) => {
  const { username, password } = req.body;

  if (!username || !password) {
    return res.status(400).json({ success: false, message: '–õ–∏–ø—Å–≤–∞—Ç –¥–∞–Ω–Ω–∏' });
  }

  const query = 'SELECT * FROM users WHERE username = ? AND password = ?';
  db.query(query, [username, password], (err, results) => {
    if (err) {
      console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—è–≤–∫–∞ –∑–∞ –∞–¥–º–∏–Ω –ª–æ–≥–∏–Ω:', err);
      return res.status(500).json({ success: false, message: 'Database error' });
    }

    if (results.length > 0) {
      res.status(200).json({ success: true });
    } else {
      res.status(401).json({ success: false, message: '–ù–µ–≤–∞–ª–∏–¥–Ω–∏ –¥–∞–Ω–Ω–∏' });
    }
  });
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –Ω–æ–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
app.post('/api/register', (req, res) => {
  const { username, password, email } = req.body;
  const query = 'INSERT INTO users (username, password, email) VALUES (?, ?, ?)';
  db.query(query, [username, password, email], (err, result) => {
    if (err) return res.status(500).json({ error: 'DB error' });
    res.json({ success: true });
  });
});

// –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –ª–∏–Ω–∫–æ–≤–µ (Link1, Link2, Link3) –æ—Ç –≤—Å–∏—á–∫–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏
app.post('/api/clear-urls', (req, res) => {
  const query = 'UPDATE users SET Link1 = NULL, Link2 = NULL, Link3 = NULL';
  db.query(query, (err, result) => {
    if (err) {
      console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ –ª–∏–Ω–∫–æ–≤–µ:', err);
      return res.status(500).json({ error: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—á–∏—Å—Ç–≤–∞–Ω–µ' });
    }
    res.json({ success: true, message: '–í—Å–∏—á–∫–∏ –ª–∏–Ω–∫–æ–≤–µ —Å–∞ –∏–∑—á–∏—Å—Ç–µ–Ω–∏.' });
  });
});

// –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –Ω–æ–≤–æ URL –≤ Link1, Link2 –∏–ª–∏ Link3, —Å —Ü–∏–∫–ª–∏—á–µ–Ω –ø—Ä–µ–∑–∞–ø–∏—Å
app.post('/api/save-url', (req, res) => {
  const { username, shortUrl } = req.body;

  const selectQuery = 'SELECT Link1, Link2, Link3, LastSavedIndex FROM users WHERE Username = ?';
  db.query(selectQuery, [username], (err, results) => {
    if (err) return res.status(500).json({ error: 'DB error (select)' });
    if (results.length === 0) return res.status(404).json({ error: '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω' });

    const user = results[0];

    if (!user.Link1) {
      return db.query('UPDATE users SET Link1 = ? WHERE Username = ?', [shortUrl, username], (err2) => {
        if (err2) return res.status(500).json({ error: 'DB error (L1)' });
        return res.json({ success: true, message: '–ó–∞–ø–∏—Å–∞–Ω –≤ Link1' });
      });
    }
    if (!user.Link2) {
      return db.query('UPDATE users SET Link2 = ? WHERE Username = ?', [shortUrl, username], (err2) => {
        if (err2) return res.status(500).json({ error: 'DB error (L2)' });
        return res.json({ success: true, message: '–ó–∞–ø–∏—Å–∞–Ω –≤ Link2' });
      });
    }
    if (!user.Link3) {
      return db.query('UPDATE users SET Link3 = ? WHERE Username = ?', [shortUrl, username], (err2) => {
        if (err2) return res.status(500).json({ error: 'DB error (L3)' });
        return res.json({ success: true, message: '–ó–∞–ø–∏—Å–∞–Ω –≤ Link3' });
      });
    }

    // –¶–∏–∫–ª–∏—á–Ω–æ –ø—Ä–µ–∑–∞–ø–∏—Å–≤–∞–Ω–µ –≤ Link1‚Äì3
    let next = (user.LastSavedIndex + 1) % 3;
    const field = `Link${next + 1}`;
    const updateQuery = `UPDATE users SET ${field} = ?, LastSavedIndex = ? WHERE Username = ?`;

    db.query(updateQuery, [shortUrl, next, username], (err3) => {
      if (err3) return res.status(500).json({ error: 'DB error (overwrite)' });
      res.json({ success: true, message: `–ü—Ä–µ–∑–∞–ø–∏—Å–∞–Ω –≤ ${field}` });
    });
  });
});

// –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –µ–¥–∏–Ω –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω –ª–∏–Ω–∫ –æ—Ç –ª–æ–≥–Ω–∞—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª (–ø–æ –∏–º–µ –Ω–∞ –ø–æ–ª–µ—Ç–æ)
app.post('/api/clear-link', (req, res) => {
  const { field } = req.body;
  const validFields = ['Link1', 'Link2', 'Link3'];

  if (!req.session.user || !validFields.includes(field)) {
    return res.status(400).json({ success: false });
  }

  const username = req.session.user.username;
  const query = `UPDATE users SET ${field} = NULL WHERE Username = ?`;
  db.query(query, [username], (err) => {
    if (err) return res.status(500).json({ success: false });
    res.json({ success: true });
  });
});


// –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –æ—Ç –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∞
app.delete('/api/delete-user/:username', (req, res) => {
  const { username } = req.params;
  const query = 'DELETE FROM users WHERE username = ?';
  db.query(query, [username], (err, result) => {
    if (err) {
      console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª:', err);
      return res.status(500).json({ success: false, error: 'Database error' });
    }
    if (result.affectedRows === 0) {
      return res.status(404).json({ success: false, message: '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω.' });
    }
    res.json({ success: true, message: '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ –∏–∑—Ç—Ä–∏—Ç —É—Å–ø–µ—à–Ω–æ.' });
  });
});

// –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –æ—Ç –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∞
app.put('/api/update-user', (req, res) => {
  const { oldUsername, newUsername, newEmail, newPassword } = req.body;

  if (!oldUsername || !newUsername || !newEmail || !newPassword) {
    return res.status(400).json({ success: false, message: '–õ–∏–ø—Å–≤–∞—Ç –¥–∞–Ω–Ω–∏ –∑–∞ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ.' });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –Ω–æ–≤–æ—Ç–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ –∏–ª–∏ –Ω–æ–≤–∏—è—Ç –∏–º–µ–π–ª –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—Ç –∑–∞ –¥—Ä—É–≥ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
  const checkQuery = 'SELECT * FROM users WHERE (Username = ? OR Email = ?) AND Username != ?';
  db.query(checkQuery, [newUsername, newEmail, oldUsername], (err, results) => {
    if (err) {
      console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∏ –¥–∞–Ω–Ω–∏:', err);
      return res.status(500).json({ success: false, message: 'Database error (check)' });
    }

    if (results.length > 0) {
      return res.status(409).json({ success: false, message: '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ –∏–ª–∏ –∏–º–µ–π–ª –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—Ç.' });
    }

    // –ê–∫–æ –Ω—è–º–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç ‚Äì –ø—Ä–∞–≤–∏–º –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ
    const updateQuery = 'UPDATE users SET Username = ?, Email = ?, Password = ? WHERE Username = ?';
    db.query(updateQuery, [newUsername, newEmail, newPassword, oldUsername], (err2, result) => {
      if (err2) {
        console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª:', err2);
        return res.status(500).json({ success: false, message: 'Database error (update)' });
      }
      if (result.affectedRows === 0) {
        return res.status(404).json({ success: false, message: '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω.' });
      }
      res.json({ success: true, message: '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ –æ–±–Ω–æ–≤–µ–Ω —É—Å–ø–µ—à–Ω–æ.' });
    });
  });
});


console.log("rebuild")
// –í—Ä—ä—â–∞–Ω–µ –Ω–∞ –ª–∏–Ω–∫–æ–≤–µ—Ç–µ (Link1, Link2, Link3) –Ω–∞ –ª–æ–≥–Ω–∞—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
app.get('/api/user-links', (req, res) => {
  if (!req.session.user || !req.session.user.username) {
    return res.status(401).json({ success: false, message: '–ù—è–º–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å–∏—è' });
  }

  const username = req.session.user.username;
  const query = 'SELECT Link1, Link2, Link3 FROM users WHERE Username = ?';

  db.query(query, [username], (err, results) => {
    if (err) return res.status(500).json({ success: false, message: 'DB –≥—Ä–µ—à–∫–∞' });
    if (results.length === 0) return res.status(404).json({ success: false, message: '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω' });

    const { Link1, Link2, Link3 } = results[0];
    const links = [Link1, Link2, Link3].filter(Boolean); // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ –ø—Ä–∞–∑–Ω–∏—Ç–µ
    res.json({ success: true, links });
  });
});


// –í—Ä—ä—â–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ –∑–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∞
app.get('/api/users', (req, res) => {
  const query = 'SELECT * FROM users';
  db.query(query, (err, results) => {
    if (err) {
      console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏:', err);
      return res.status(500).json({ error: 'Database error' });
    }
    res.json(results);
  });
});


// API –º–∞—Ä—à—Ä—É—Ç –∑–∞ –≤–µ—Ä—Å–∏—è –Ω–∞ backend-–∞
const APP_VERSION = 'v1.0.4'; // —Å–º–µ–Ω—è–π —Ä—ä—á–Ω–æ –ø—Ä–∏ –ø—Ä–æ–º–µ–Ω–∏

app.get('/api/version', (req, res) => {
  res.json({ version: APP_VERSION });
});

// –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Å—ä—Ä–≤—ä—Ä–∞
app.listen(PORT, '0.0.0.0', () => {
  console.log(`–°—ä—Ä–≤—ä—Ä—ä—Ç —Ä–∞–±–æ—Ç–∏ –Ω–∞ http://0.0.0.0:${PORT}`);
});

// Version: v1.0.6 | Last updated: 2025-05-11
